These are bugs I discovered in the Rust implementation that also are in the Cython implementation (meaning the Cython version has the same or equivalent code), yet they don't cause an exception to get raised in the Cython version but do cause the Rust code to fail. I'm recording them here in case they aren't really bugs in the Cython version.

1. If the sampled collision length is l=1 or l=2, then num_delayed gets set to 0, and later we try to subtract 2 from it. This causes an underflow panic in the Rust code because we use usize. This causes no exception in the Cython code because num_delayed is declared as a signed integer int64_t. But it should be unsigned because we can't have a negative number of delayed agents. So I'm not sure what the Cython code is doing when num_delayed gets set to a negative number, but I assume nothing good.

2. The loop in Simultion.run (not Simulator.run) was not always checking if the configuration was silent. One default implementation of `stop_condition` does check this, but not all of them. But it seems we'd always want to stop run if the configuration ever goes silent. In the Rust code this was causing an infinite loop as it called Simulator.run repeatlyed, which never made any progress (BTW this was when do_gillespie = true, not sure if that matters). But I don't see how the original Cython code was correct without this check. I've not been able to test or try to reproduce that behavior in the Cython code yet.

